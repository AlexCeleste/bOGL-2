
 bOGL 2 alpha
--------------

About:
bOGL is an OpenGL based open source 3D engine for BlitzBasic (Tested on BlitzPlus).
bOGL also works with Blitz3D, if you remove the CreateCanvas3D function.

Installation:
Move the folder named "userlibs" to BlitzBasic folder. Overwrite if neccessary
or add the content of the files in the existing ones. Now you should be able to
run the demo and create your own projects.

Please overwrite any userlib files remaining from bOGL version 1.01.

Credits:
bOGL 1 by Andres Pajo
bOGL 2 by Alex Gilding
OGL Direct by Peter Scheutz


 Command reference
-------------------

Graphics3D(title$, width, height, depth, mode)
CreateCanvas3D(x, y, width,height, group)
AmbientLight(red, green, blue)
CreateCamera()
CameraRange(handler, near#, far#)
CameraFieldOfView(handler, angle#)
CameraClsColor(handler, red, green, blue)
CameraFogMode(handler, mode[, near#[, far#]])
CameraFogColor(handler, red, green, blue[, alpha#])
CameraViewport(handler, x, y, width, height)
CreateLight(red, green, blue, flag)
LightRange(handler, range#)
CreatePivot()
CreateMesh()
AddVertex(mesh, x#, y#, z#[, u#, v#]), AddTriangle(mesh, v0, v1, v2)
VertexCoords(mesh, v, x#, y#, z#), VextexTexCoords(mesh, v, u#, v#)
VertexNormal(mesh, v, nx#, ny#, nz#), VertexColor(mesh, v, r#, g#, b#)
VertexX#(mesh, v), VertexY#(mesh, v), VertexZ#(mesh, v), VertexU#(mesh, v), VertexV#(mesh, v)
CreateCube()
CreateSprite()
LoadTerrain(terrain$)
PositionEntity(handler, x#, y#, z#)
MoveEntity(handler, x#, y#, z#)
RotateEntity(handler, x#, y#, z#)
TurnEntity(handler, x#, y#, z#)
PointEntity(handler, x#, y#, z#[, roll#])
ScaleEntity(handler, x#, y#, z#)
PaintEntity(handler, red, green, blue)
EntityAlpha(handler, alpha#)
EntityTexture(handler, texture)
ShowEntity(handler, state)
CopyEntity(handler)
FreeEntity(handler)
FlipPolygons(handler)
RotateSubMesh(handler, vf, vt, rx#, ry#, rz#, cx#, cy#, cz#)
TranslateSubMesh(handler, vf, vt, tx#, ty#, tz#)
ScaleSubMesh(handler, vf, vt, sx#, sy#, sz#, cx#, cy#, cz#)
EntityX#(handler), EntityY#(handler), EntityZ#(handler)
EntityXAngle#(handler), EntityYAngle#(handler), EntityZAngle#(handler)
CreateTexture(width, height[, filter])
LoadTexture(file$[, quality, filter])
FreeTexture(handler)
TextureWidth(handler), TextureHeight(handler)
GetTextureData(handler), UpdateTexture(handler, x, y, width, height, pixels)
RenderWorld()
Distance(x1#, y1#, z1#, x2#, y2#, z2#)
TFormPoint(x#, y#, z#, src, dst, out#[2])


 Still to come:
----------------

 - Parenting system (like B3D's), to make armatures and therefore skeletal animation easier
 - Entity FX system (things like fullbright, vertex alpha)
 - Easy stencil buffer access, for shadows, portals, etc.
 - Upgrade the vertex array rendering to use VBOs
 - Translate to C

